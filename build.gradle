// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        maven {
            url prop_oppoMavenUrl

            credentials {
                username sonatypeUsername
                password sonatypeUsername
            }
        }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${prop_gradleVersion}"
        classpath "com.oppo.plugin:oppo-native-dependencies:${prop_oppoNativeDependenciesVersion}"
    }
}

allprojects {
    repositories {
        maven {
            url prop_oppoMavenUrl

            credentials {
                username sonatypeUsername
                password sonatypeUsername
            }
        }
        flatDir {
            dirs 'aarlibs'
        }
    }
}

//compile app use application
apply plugin: 'com.android.application'

//compile library project use library
//apply plugin: 'com.android.library'

//depends on so files in remote repositories use oppo-native-dependencies
//apply plugin: 'oppo-native-dependencies'


android {
    compileSdkVersion prop_compileSdkVersion
    buildToolsVersion prop_buildToolsVersion

    signingConfigs {

        platform {
            storeFile file("${prop_keyPath}/platform.keystore")
            keyAlias 'androidplatformkey'
            keyPassword prop_keyPassword
            storePassword prop_storePassword
        }

        media {
            storeFile file("${prop_keyPath}/media.keystore")
            keyAlias 'androidmediakey'
            keyPassword prop_keyPassword
            storePassword prop_storePassword
        }

        shared {
            storeFile file("${prop_keyPath}/shared.keystore")
            keyAlias 'androidsharedkey'
            keyPassword prop_keyPassword
            storePassword prop_storePassword
        }

        testkey {
            storeFile file("${prop_keyPath}/testkey.keystore")
            keyAlias 'androidtestkeykey'
            keyPassword prop_keyPassword
            storePassword prop_storePassword
        }
    }


    defaultConfig {
        archivesBaseName = prop_archivesBaseName

        if (project.hasProperty('prop_disableSubPackage') && prop_disableSubPackage.toBoolean()) {
            println("app disable resource subpacakge")
        } else {
            if (project.hasProperty('prop_resConfigs') && !prop_resConfigs.toString().isEmpty()) {
                resConfigs prop_resConfigs
            } else {
                println("subpacakge config is empty, no subpackage")
            }
        }
        manifestPlaceholders = [ versionCommit:"${prop_versionCommit}",versionDate:"${prop_versionDate}" ]
    }

    buildTypes {
        release {

            //config signing type
            signingConfig signingConfigs.platform

            //config enable proGuard
            minifyEnabled false

            //config enable shrink unused resources
            shrinkResources false

            //proGuard rules files
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

        }

        releaseExp {
            initWith(buildTypes.release)
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']

            //if apply plugin: 'oppo-native-dependencies' and libs as the default jniLibs folder,libs will be clean up
            //jniLibs.srcDirs = ['libs']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')

        releaseExp.setRoot('build-types/releaseExp')
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    aaptOptions {
        additionalParameters "-I","${sdkDirectory}/platforms/${compileSdkVersion}/oppo-framework-res.apk"
    }

    compileOptions {
        encoding 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    //depends on library project

    //include all jars in libs
    //compile fileTree(include: ['*.jar'], dir: 'libs')

    //depends on jar in remote repositories, format is 'group:name:version'

    //you can also put jars in user-libs,which created by yourself
    //compile files('user-libs/com.coloros.statistics.jar')
    //compile fileTree(include: ['*.jar'], dir: 'user-libs')
}